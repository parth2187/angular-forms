{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nclass AuthService {\n  constructor(router) {\n    this.router = router;\n    this.isLoggedIn = false;\n  }\n  getIsLoggedIn() {\n    return this.isLoggedIn;\n  }\n  login(username, password) {\n    // Perform authentication logic here (e.g., check username and password against database)\n    // Replace the following placeholder logic with your actual authentication implementation\n    if (username === 'admin' && password === 'password') {\n      this.isLoggedIn = true;\n      return true;\n    } else {\n      this.isLoggedIn = false;\n      return false;\n    }\n  }\n  setLoggedIn(value) {\n    this.isLoggedIn = value;\n  }\n  checkAuthentication() {\n    if (!this.isLoggedIn) {\n      this.router.navigate(['/auth']);\n    }\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["AuthService","constructor","router","isLoggedIn","getIsLoggedIn","login","username","password","setLoggedIn","value","checkAuthentication","navigate","i0","ɵɵinject","i1","Router","factory","ɵfac","providedIn"],"sources":["/home/parthkawatra/Desktop/web_projects/angular/angular-forms/src/app/auth/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n isLoggedIn = false;\n\n  constructor(private router: Router) {}\n\n getIsLoggedIn(): boolean {\n    return this.isLoggedIn;\n  }\n  \n  login(username: string, password: string): boolean {\n    // Perform authentication logic here (e.g., check username and password against database)\n    // Replace the following placeholder logic with your actual authentication implementation\n    if (username === 'admin' && password === 'password') {\n      this.isLoggedIn = true;\n      return true;\n    } else {\n      this.isLoggedIn = false;\n      return false;\n    }\n  }\n  setLoggedIn(value: boolean): void {\n    this.isLoggedIn = value;\n  }\n\n  checkAuthentication(): void {\n    if (!this.isLoggedIn) {\n      this.router.navigate(['/auth']);\n    }\n  }\n\n}\n"],"mappings":";;AAGA,MAGaA,WAAW;EAGtBC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;IAF3B,KAAAC,UAAU,GAAG,KAAK;EAEoB;EAEtCC,aAAaA,CAAA;IACV,OAAO,IAAI,CAACD,UAAU;EACxB;EAEAE,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC;IACA;IACA,IAAID,QAAQ,KAAK,OAAO,IAAIC,QAAQ,KAAK,UAAU,EAAE;MACnD,IAAI,CAACJ,UAAU,GAAG,IAAI;MACtB,OAAO,IAAI;KACZ,MAAM;MACL,IAAI,CAACA,UAAU,GAAG,KAAK;MACvB,OAAO,KAAK;;EAEhB;EACAK,WAAWA,CAACC,KAAc;IACxB,IAAI,CAACN,UAAU,GAAGM,KAAK;EACzB;EAEAC,mBAAmBA,CAAA;IACjB,IAAI,CAAC,IAAI,CAACP,UAAU,EAAE;MACpB,IAAI,CAACD,MAAM,CAACS,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;EAEnC;;AA5BWX,WAAW,C;mBAAXA,WAAW,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;AAAA;AAAXf,WAAW,C;SAAXA,WAAW;EAAAgB,OAAA,EAAXhB,WAAW,CAAAiB,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPlB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}