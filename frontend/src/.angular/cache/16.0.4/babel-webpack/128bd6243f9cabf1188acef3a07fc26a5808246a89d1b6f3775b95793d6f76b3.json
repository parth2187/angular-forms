{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet AuthPageComponent = class AuthPageComponent {\n  constructor(authService, http, router) {\n    this.authService = authService;\n    this.http = http;\n    this.router = router;\n    this.user = {\n      name: '',\n      email: '',\n      password: ''\n    };\n  }\n  onSubmit(formata) {\n    // Pass the user object to the AuthService for authentication\n    const isLoggedIn = this.authService.login(this.user.email, this.user.password);\n    if (isLoggedIn) {\n      // Authentication success logic\n      console.log('Logged in successfully');\n    } else {\n      // Authentication error logic\n      console.error('Invalid credentials');\n    }\n  }\n};\nAuthPageComponent = __decorate([Component({\n  selector: 'app-auth-page',\n  templateUrl: './auth-page.component.html',\n  styleUrls: ['./auth-page.component.css']\n})], AuthPageComponent);\nexport { AuthPageComponent };","map":{"version":3,"names":["Component","AuthPageComponent","constructor","authService","http","router","user","name","email","password","onSubmit","formata","isLoggedIn","login","console","log","error","__decorate","selector","templateUrl","styleUrls"],"sources":["/home/parthkawatra/Desktop/web_projects/angular/angular-forms/src/app/auth-page/auth-page.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { UserData } from '../user-data';\nimport { AuthService } from '../auth/auth.service';\nimport { NgForm } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-auth-page',\n  templateUrl: './auth-page.component.html',\n  styleUrls: ['./auth-page.component.css']\n})\nexport class AuthPageComponent {\n  user: UserData = {\n    name: '',\n    email: '',\n    password: ''\n  };\n\n  constructor(private authService:AuthService, private http:HttpClient, private router:Routr) { }\n\n    \n  onSubmit(formata: NgForm): void {\n    // Pass the user object to the AuthService for authentication\n    const isLoggedIn = this.authService.login(this.user.email, this.user.password);\n\n    if (isLoggedIn) {\n      // Authentication success logic\n      console.log('Logged in successfully');\n    } else {\n      // Authentication error logic\n      console.error('Invalid credentials');\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAWzC,IAAaC,iBAAiB,GAA9B,MAAaA,iBAAiB;EAO5BC,YAAoBC,WAAuB,EAAUC,IAAe,EAAUC,MAAY;IAAtE,KAAAF,WAAW,GAAXA,WAAW;IAAsB,KAAAC,IAAI,GAAJA,IAAI;IAAqB,KAAAC,MAAM,GAANA,MAAM;IANpF,KAAAC,IAAI,GAAa;MACfC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE;KACX;EAE6F;EAG9FC,QAAQA,CAACC,OAAe;IACtB;IACA,MAAMC,UAAU,GAAG,IAAI,CAACT,WAAW,CAACU,KAAK,CAAC,IAAI,CAACP,IAAI,CAACE,KAAK,EAAE,IAAI,CAACF,IAAI,CAACG,QAAQ,CAAC;IAE9E,IAAIG,UAAU,EAAE;MACd;MACAE,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;KACtC,MAAM;MACL;MACAD,OAAO,CAACE,KAAK,CAAC,qBAAqB,CAAC;;EAExC;CACD;AAtBYf,iBAAiB,GAAAgB,UAAA,EAL7BjB,SAAS,CAAC;EACTkB,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,C,EACWnB,iBAAiB,CAsB7B;SAtBYA,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}