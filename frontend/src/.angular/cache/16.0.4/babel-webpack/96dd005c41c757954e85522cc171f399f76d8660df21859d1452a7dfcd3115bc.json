{"ast":null,"code":"import { catchError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nclass AuthService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/signup';\n    this.isLoggedIn = false;\n  }\n  signup(name, email, password) {\n    const body = {\n      name,\n      email,\n      password\n    };\n    return this.http.post(this.apiUrl, body).pipe(catchError(this.handleError));\n    ;\n    logg;\n  }\n  getIsLoggedIn() {\n    return this.isLoggedIn;\n  }\n  setLoggedIn(value) {\n    this.isLoggedIn = value;\n  }\n  checkAuthentication() {\n    if (!this.isLoggedIn) {\n      this.router.navigate(['/auth']);\n    }\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["catchError","AuthService","constructor","router","http","apiUrl","isLoggedIn","signup","name","email","password","body","post","pipe","handleError","logg","getIsLoggedIn","setLoggedIn","value","checkAuthentication","navigate","i0","ɵɵinject","i1","Router","i2","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/parthkawatra/Desktop/web_projects/angular/angular-forms/src/app/auth/auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { catchError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:3000/signup';\n\n isLoggedIn = false;\n\n  constructor(private router: Router, private http: HttpClient) {}\n\n  signup(name: string, email: string, password: string) {\n    const body = { name, email, password };\n    return this.http.post(this.apiUrl, body).pipe(\n      catchError(this.handleError);\n    ); \n     \n      logg\n  }\n\n getIsLoggedIn(): boolean {\n    return this.isLoggedIn;\n  }\n\n  setLoggedIn(value: boolean): void {\n    this.isLoggedIn = value;\n  }\n\n  checkAuthentication(): void {\n    if (!this.isLoggedIn) {\n      this.router.navigate(['/auth']);\n    }\n  }\n\n}\n"],"mappings":"AAGA,SAASA,UAAU,QAAQ,MAAM;;;;AAEjC,MAGaC,WAAW;EAKtBC,YAAoBC,MAAc,EAAUC,IAAgB;IAAxC,KAAAD,MAAM,GAANA,MAAM;IAAkB,KAAAC,IAAI,GAAJA,IAAI;IAJxC,KAAAC,MAAM,GAAG,8BAA8B;IAEhD,KAAAC,UAAU,GAAG,KAAK;EAE8C;EAE/DC,MAAMA,CAACC,IAAY,EAAEC,KAAa,EAAEC,QAAgB;IAClD,MAAMC,IAAI,GAAG;MAAEH,IAAI;MAAEC,KAAK;MAAEC;IAAQ,CAAE;IACtC,OAAO,IAAI,CAACN,IAAI,CAACQ,IAAI,CAAC,IAAI,CAACP,MAAM,EAAEM,IAAI,CAAC,CAACE,IAAI,CAC3Cb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC;IAC7B;IAECC,IAAI;EACR;EAEDC,aAAaA,CAAA;IACV,OAAO,IAAI,CAACV,UAAU;EACxB;EAEAW,WAAWA,CAACC,KAAc;IACxB,IAAI,CAACZ,UAAU,GAAGY,KAAK;EACzB;EAEAC,mBAAmBA,CAAA;IACjB,IAAI,CAAC,IAAI,CAACb,UAAU,EAAE;MACpB,IAAI,CAACH,MAAM,CAACiB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;EAEnC;;AA5BWnB,WAAW,C;mBAAXA,WAAW,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;AAAA;AAAXzB,WAAW,C;SAAXA,WAAW;EAAA0B,OAAA,EAAX1B,WAAW,CAAA2B,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEP5B,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}